#serve per far partire più cose, in questo caso facciamo partire sia un docker per il backend sia un docker per postgres
#ricordarsi di ammazzare il postgres locale sennò c'è un conflitto

version: '3'

services:

  discovery:
    build: .
    image: discovery
    ports:
      - "8761:8761"

  apigateway:
    build: .
    image: apigateway
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery:8761/eureka/
    ports:
      - "9000:9000"
    depends_on:
      - discovery

  dbpostgresql: #servizio1 (inventato da noi, deve coincidere con quello nel application.properties)
    image: "postgres"  #nome fisso di postgres, non inventato
    ports:
      - "5432"
    environment: #variabili di ambiente
      POSTGRES_DB: testdb
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      restart: unless-stopped
    depends_on:
      - discovery

  app: #servizio2, il nostro container, quello che abbiamo creato nel dockerfile, il backend
    build: .
    image: appbootrest #nome del jar che verrà mandato in esecuzione, deve coincidere con quello nel dockerfile
    environment:
      eureka.client.serviceUrl.defaultZone: http://discovery:8761/eureka/
    container_name: appbootrest
    ports:
      - "8080:8080"
    depends_on: #alias links, uno dei due è in deprecazione
      - dbpostgresql  #importante, sennò non si connette col database
      - discovery

